{
    "url": "API endpoint for fetching issue details.",
    "repository_url": "API endpoint for the parent repository.",
    "labels_url": "API endpoint for managing issue labels.",
    "comments_url": "API endpoint for retrieving issue comments.",
    "events_url": "API endpoint for tracking issue events.",
    "html_url": "Web URL to view the issue on GitHub.",
    "id": "Unique identifier for the issue.",
    "node_id": "GraphQL node identifier for the issue.",
    "number": "Sequential number assigned to the issue.",
    "title": "Title summarizing the issue or pull request.",
    "user": {
      "login": "GitHub username of the issue author.",
      "id": "Unique identifier for the user.",
      "node_id": "GraphQL node identifier for the user.",
      "avatar_url": "URL to the user’s profile picture.",
      "url": "API endpoint for user details.",
      "html_url": "Web URL to the user’s GitHub profile.",
      "followers_url": "API endpoint for listing followers.",
      "following_url": "API endpoint for followed users.",
      "gists_url": "API endpoint for user gists.",
      "starred_url": "API endpoint for starred repositories.",
      "subscriptions_url": "API endpoint for repository subscriptions.",
      "organizations_url": "API endpoint for organizations user belongs to.",
      "repos_url": "API endpoint for user repositories.",
      "events_url": "API endpoint for user activity events.",
      "received_events_url": "API endpoint for events affecting this user.",
      "type": "Type of GitHub account (User, Organization, Bot).",
      "user_view_type": "Visibility setting of the user profile.",
      "site_admin": "Indicates if the user is a GitHub administrator."
    },
    "labels": [
      {
        "id": "Unique identifier for the label.",
        "node_id": "GraphQL node identifier for the label.",
        "url": "API endpoint for label details.",
        "name": "Name assigned to the label.",
        "color": "Hex color code of the label.",
        "default": "Indicates if this is a default label.",
        "description": "Brief description of the label’s purpose."
      }
    ],
    "state": "Current status of the issue (open, closed).",
    "locked": "Indicates if the issue is locked for discussion.",
    "assignee": "User assigned to resolve the issue.",
    "assignees": "List of all users assigned to the issue.",
    "milestone": "Milestone associated with this issue, if any.",
    "comments": "Total number of comments on the issue.",
    "created_at": "Timestamp when the issue was created.",
    "updated_at": "Timestamp of the last update to the issue.",
    "closed_at": "Timestamp when the issue was closed.",
    "author_association": "Author’s relationship to the repository (owner, collaborator).",
    "sub_issues_summary": {
      "total": "Total number of related sub-issues.",
      "completed": "Number of sub-issues that are completed.",
      "percent_completed": "Percentage of sub-issues resolved."
    },
    "active_lock_reason": "Reason for locking the issue, if applicable.",
    "draft": "Indicates if the issue is a draft.",
    "pull_request": {
      "url": "API endpoint for pull request details.",
      "html_url": "Web URL to view the pull request.",
      "diff_url": "URL for the pull request diff file.",
      "patch_url": "URL for the pull request patch file.",
      "merged_at": "Timestamp when the pull request was merged.",
      "patch_url_body": "Patch content with changes applied in this pull request."
    },
    "body": "Detailed description or discussion of the issue.",
    "closed_by": "User who closed the issue or pull request.",
    "reactions": {
      "url": "API endpoint for issue reactions.",
      "total_count": "Total number of reactions.",
      "+1": "Count of thumbs-up reactions.",
      "-1": "Count of thumbs-down reactions.",
      "laugh": "Count of laugh reactions.",
      "hooray": "Count of hooray reactions.",
      "confused": "Count of confused reactions.",
      "heart": "Count of heart reactions.",
      "rocket": "Count of rocket reactions.",
      "eyes": "Count of eyes reactions."
    },
    "timeline_url": "API endpoint for the issue’s timeline.",
    "performed_via_github_app": "GitHub app used to perform the action.",
    "state_reason": "Explanation for the current issue state.",
    "comments_url_body": "List of comment bodies, if any.",
    "pull_request_url_body": {
      "url": "API endpoint for pull request details.",
      "id": "Unique identifier for the pull request.",
      "node_id": "GraphQL node identifier for pull request.",
      "html_url": "Web URL to view the pull request.",
      "diff_url": "URL for the pull request diff file.",
      "patch_url": "URL for the pull request patch file.",
      "issue_url": "API endpoint for the linked issue.",
      "number": "Unique number assigned to this pull request.",
      "state": "Current status of the pull request.",
      "locked": "Indicates if the pull request is locked.",
      "title": "Title summarizing the pull request.",
      "user": "User who created the pull request.",
      "body": "Detailed description of pull request changes.",
      "created_at": "Timestamp when the pull request was created.",
      "updated_at": "Timestamp of last update.",
      "closed_at": "Timestamp when the pull request was closed.",
      "merged_at": "Timestamp when the pull request was merged.",
      "merge_commit_sha": "SHA identifier of the merge commit.",
      "assignee": "User assigned to review or merge.",
      "assignees": "List of assigned users for the pull request.",
      "requested_reviewers": "List of users requested to review.",
      "requested_teams": "List of teams requested to review.",
      "labels": "Labels associated with the pull request.",
      "milestone": "Milestone linked to the pull request.",
      "draft": "Indicates if the pull request is a draft.",
      "commits_url": "API endpoint for listing commits.",
      "review_comments_url": "API endpoint for review comments.",
      "review_comment_url": "API endpoint for single review comments.",
      "comments_url": "API endpoint for regular comments.",
      "statuses_url": "API endpoint for pull request statuses.",
      "head": {
        "label": "Branch label of the pull request head.",
        "ref": "Reference name of the pull request head branch.",
        "sha": "SHA identifier of the latest commit in head branch.",
        "user": "User who owns the head branch.",
        "repo": "Repository information of the head branch."
      },
      "base": {
        "label": "Branch label of the pull request base.",
        "ref": "Reference name of the base branch.",
        "sha": "SHA identifier of the latest commit in base branch.",
        "user": "User who owns the base branch.",
        "repo": "Repository information of the base branch."
      },
      "_links": {
        "self": "API link to the pull request details.",
        "html": "Web URL to view the pull request.",
        "issue": "API link to the related issue.",
        "comments": "API link to fetch pull request comments.",
        "review_comments": "API link to fetch review comments.",
        "review_comment": "API link to specific review comment.",
        "commits": "API link to pull request commits.",
        "statuses": "API link to check pull request status."
      },
      "author_association": "Author’s role in repository (owner, collaborator).",
      "auto_merge": "Auto-merge settings for the pull request.",
      "active_lock_reason": "Reason why the pull request is locked.",
      "merged": "Indicates if the pull request was merged.",
      "mergeable": "Indicates if the pull request can be merged.",
      "rebaseable": "Indicates if the pull request can be rebased.",
      "mergeable_state": "Current merge status of the pull request.",
      "merged_by": "User who merged the pull request.",
      "comments": "Total number of comments on pull request.",
      "review_comments": "Total number of review comments.",
      "maintainer_can_modify": "Indicates if maintainers can modify.",
      "commits": "Total number of commits in pull request.",
      "additions": "Total number of lines added.",
      "deletions": "Total number of lines removed.",
      "changed_files": "Total number of changed files.",
      "review_comments_url_body": "List of review comments on pull request."
    }
}
