{
    "0": "Pull Request 24610 titled 'Bump hypothesis from 6.102.4 to 6.115.6' was created by dependabot[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- dependabot[bot] commented on 2024-11-04T17:32:28Z: Superseded by #24696.\n",
    "1": "Pull Request 25112 titled 'Skip testAutoPgle tests.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "2": "Pull Request 15147 titled 'Move jax._src.typing into a separate Bazel target.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "3": "Pull Request 13961 titled '[call_tf] Temporary fix for CallTfEffect being visible after lowering.' was created by gnecula (User). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- sharadmv commented on 2023-01-11T21:10:26Z: > there is no real \"effect\" here\n\nCouldn't we have an effect? Users can write whatever side-effecting code they want in a TF function that could write to disk or something. Right now we are defensively marking it as effectful to avoid DCE.\n- gnecula commented on 2023-01-12T08:02:42Z: @sharadmv You are right that there could be an effect. Perhaps this was the actual reason the effect was added in cl/496022997. I was confused by the change description saying that it was done to prevent DCE from pruning arguments to call_tf.\r\n\r\nI was able to reproduce the failure in the internal test that motivated the introduction of effects, and it was indeed\r\na case of real side effects. I will abandon this PR in favor of a change that allows the user to declare if there are effects or not.\r\n\r\n\n",
    "4": "Pull Request 18717 titled 'Disable task_using_cache_metric unit test while debugging.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- google-cla[bot] commented on 2023-11-28T23:22:54Z: Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/google/jax/pull/18717/checks?check_run_id=19117223631) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.\n",
    "5": "Pull Request 17381 titled 'Switch MLIR dialects to use properties.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- joker-eph commented on 2023-08-31T19:05:39Z: \\o/ ;)\n- hawkinsp commented on 2023-08-31T19:08:36Z: @joker-eph as you might have guessed, these were disabled everywhere to land an LLVM update, and now are being enabled one-by-one.\n- joker-eph commented on 2023-08-31T21:27:09Z: Yeah I saw the patches that disabled it in a few places, but I wasn't expected folks to follow-up so quickly to enable this!\r\n\r\nWe haven't deprecated the setting that disable it right now, but it's great to see that adoption does not seem to hit too many hurdles! (I really tried to make it as backward compatible as possible, but Hyrum's Law is strong!)\n",
    "6": "Pull Request 20668 titled 'Update references to TSL `config_settings` to their new home in XLA' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "7": "Pull Request 8894 titled '[MLIR] Fix breakage to compilation cache when enabling MLIR' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- hawkinsp commented on 2021-12-13T14:08:48Z: Closing since a better PR was merged.\n",
    "8": "Pull Request 23986 titled '[Mosaic TPU] Canonicalize arith.select's condition to vector if other types are vector.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "9": "Pull Request 13597 titled 'Logit identical prefill and generate mode for xmap with pjit. ' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "10": "Pull Request 8556 titled 'A patch to enable the execution of shape-polymorphic JAX core with IREE.' was created by gnecula (User). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "11": "Pull Request 25267 titled 'Remove obsolete deprecation' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "12": "Pull Request 24666 titled '[Mosaic] Set TPU CustomCall device type based on the core_type attribute' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "13": "Pull Request 23325 titled 'Add GCC support in hermetic CUDA rules.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "14": "Pull Request 14730 titled '[sparse] fix dot_general precision in test' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "15": "Pull Request 17347 titled 'Any devices passed to jax.sharding.Mesh are required to be hashable.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "16": "Pull Request 21308 titled 'Bump matplotlib from 3.8.3 to 3.9.0' was created by dependabot[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- dependabot[bot] commented on 2024-07-02T09:11:26Z: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.\n",
    "17": "Pull Request 15392 titled 'Add cupti pip dependency, needed for GPU profiling.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "18": "Pull Request 23844 titled 'Bump filelock from 3.14.0 to 3.16.1' was created by dependabot[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- dependabot[bot] commented on 2024-09-23T18:07:24Z: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.\n",
    "19": "Pull Request 2069 titled 'Implement prototype for static keyword argument support while jitting' was created by ziyadedher (User). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- ziyadedher commented on 2020-01-24T23:16:10Z: Well, this breaks everything as it is right now. Going to investigate tomorrow.\n- mattjj commented on 2020-01-28T06:08:58Z: Thanks for investigating! This is tricky stuff (I remember from [playing with this in Autograd](https://github.com/HIPS/autograd/blob/c6f630a5ec18bd30f1485bc0dbbccb8664c77510/autograd/differential_operators.py#L149-L190), though that had to be Python 2-compatible), and it's worth exploring.\r\n\r\nMaybe the goal could be something like: either find a sound-but-not-complete approach to map keyword arguments to positional parameters, or else identify once and for all the reason we can't. WDYT?\r\n\r\nAlso, what do you think about just using `inspect.signature(f).bind(*args, **kwargs).args`? That seems to handle some simple cases:\r\n\r\n```python\r\nIn [2]: inspect.signature(lambda x, y: x + y).bind(y=2, x=3).args\r\nOut[2]: (3, 2)\r\n\r\nIn [3]: inspect.signature(lambda x, y: x + y).bind(2, y=3).args\r\nOut[3]: (2, 3)\r\n```\r\n\r\nWe could throw in some `apply_defaults` if we want:\r\n\r\n```python\r\nIn [5]: ba = inspect.signature(lambda x, y=3: x + y).bind(2)\r\n\r\nIn [6]: ba.apply_defaults()\r\n\r\nIn [7]: ba.args\r\nOut[7]: (2, 3)\r\n```\r\n\r\nIIUC that would already let us handle more cases than we do now, since it effectively turns more args into positional ones.\r\n\r\nI'd like to red-team this to make sure we can never be misled by reasonable metadata values though, and produce silently wrong results... Is there any way to make a wrapper that would, instead of just obscuring the signature (causing us to error when keyword arguments are passed), actually make us bind incorrect values? Or is that only possible with malicious setting of `__wrapped__` or something like that?\n- mattjj commented on 2020-01-28T06:12:15Z: Ah, I misread the code, maybe using `sig.bind` is exactly your strategy; I didn't understand the need for the rest of the code (ie why define `_fun`), but maybe it's to handle keyword-only args (which are new to me, coming from py2).\r\n\r\n(I should have read your PR comment first, but instead I just looked at the code ;) )\n- mattjj commented on 2020-01-28T06:22:18Z: By the way, linear_util.py already supports keyword arguments everywhere AFAIK.\r\n\r\n+1 to profiling this. Perhaps we only need to call into this when keyword arguments are actually used.\r\n\r\nAlso +1 to raising errors: we don't need to have a complete solution, and just handling more cases than we currently do would be an improvement!\r\n\r\nHere's one way we might write this in a linear_util.py style:\r\n\r\n```python\r\nfrom inspect import signature\r\nfrom functools import partial\r\n\r\nfrom jax import jit\r\nimport jax.linear_util as lu\r\n\r\ndef make_args_positional(f):\r\n  return _make_args_positional(lu.wrap_init(f), signature(f)).call_wrapped\r\n\r\n@lu.transformation\r\ndef _make_args_positional(sig, *args, **kwargs):\r\n  ba = sig.bind(*args, **kwargs)\r\n  ba.apply_defaults()\r\n  ans = yield ba.args, ba.kwargs\r\n  yield ans\r\n\r\n@make_args_positional\r\n@partial(jit, static_argnums=(1,))\r\ndef f(x, y):\r\n  return x + y\r\n\r\nf(2, y=3)  # fails if @make_args_positional is removed\r\n\r\n@make_args_positional\r\n@partial(jit, static_argnums=(1,))\r\ndef g(x, y, **kwargs):\r\n  return x + y + kwargs['z']\r\n\r\ng(2, y=3, z=2)  # works b/c we make enough args positional\r\n\r\n@make_args_positional\r\n@partial(jit, static_argnums=(1,))\r\ndef h(x, **kwargs):\r\n  return x + kwargs['y'] + kwargs['z']\r\n\r\nh(2, y=3, z=2)  # raises same error as usual\r\n```\r\n\r\n(Making it an extra transformation this way might even be useful as an API, to make it opt-in behavior, though I'm not sure that's a good idea.)\n- ziyadedher commented on 2020-01-28T13:50:04Z: @mattjj Thanks for taking a look at this! Yes, the reason I had to make a new function was to get around the keyword-only argument issue; however, doing that breaks the caching system since we are now constructing a new function object at every `jit` call and using that as our `jitted` function. To get around this, I used a very hacky wrapper class that emulates (to the greatest extent possible in vanilla Python) the inputted function while still converting the arguments correctly:\r\n\r\n```python\r\n  class Fun:\r\n    def __init__(self, fun):\r\n      self.fun = fun\r\n\r\n    def __call__(self, *args):\r\n      fun_params = list(fun_sig.parameters.values())\r\n      new_args = []\r\n      new_kwargs = {}\r\n      for arg, param in zip(args, fun_params):\r\n        if param.kind is inspect.Parameter.KEYWORD_ONLY:\r\n          new_kwargs[param.name] = arg\r\n        else:\r\n          new_args.append(arg)\r\n      return self.fun(*new_args, **new_kwargs)\r\n\r\n    def __hash__(self):\r\n      return hash(self.fun)\r\n\r\n    def __eq__(self, other):\r\n      return self.fun == other\r\n\r\n    def __getattr__(self, name):\r\n      if name == \"fun\":\r\n        return super().__getattribute__(\"fun\")\r\n      else:\r\n        return self.fun.__getattribute__(name)\r\n\r\n    def __getattribute__(self, name):\r\n      if name == \"__init__\":\r\n        return functools.partial(Fun.__init__, self)\r\n      elif name == \"__call__\":\r\n        return functools.partial(Fun.__call__, self)\r\n      elif name == \"__hash__\":\r\n        return functools.partial(Fun.__hash__, self)\r\n      elif name == \"__eq__\":\r\n        return functools.partial(Fun.__eq__, self)\r\n      else:\r\n        return Fun.__getattr__(self, name)\r\n  _fun = Fun(fun)\r\n```\r\nHowever, this then raised a new issue where since we are using a `WeakKeyRef` dictionary and the instance of this class is created within the `jit` function, all strong references are lost and the function is dropped from cache anyway.\r\n\r\n---\r\n\r\nI will be playing around with the code example you gave today and see where it takes me, it's probably a lot less fragile than the current approach.\n",
    "20": "Pull Request 17763 titled 'Remove code that skips array PRNG tests on CUDA.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "21": "Pull Request 9117 titled '[JAX] xmap: specify shardings only on the named dimensions in the weak mode.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "22": "Pull Request 14532 titled '[Rollforward] Convert _arrays to return PyArray instead of PyBuffer.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "23": "Pull Request 17397 titled '[callback] Some test cleanup.' was created by gnecula (User). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "24": "Pull Request 3015 titled 'Move jax.numpy's implementation into a private jax._src directory.' was created by hawkinsp (User). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- gnecula commented on 2020-05-11T10:23:08Z: I like this change. Is there a specific aspect that you want feedback on?\n- hawkinsp commented on 2020-05-11T13:45:32Z: I mostly want agreement that we are happy with this layout, given this will be a disruptive change (e.g., it will cause merge problems for a bunch of outstanding PRs.)\n",
    "25": "Pull Request 14426 titled 'Fix _standard_rep_rule in shard_map.py when in_rep is empty.' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "26": "Pull Request 16553 titled '[shape_poly] Refactor support for dynamic shapes for linalg.eig and linalg.eigh' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "27": "Pull Request 25894 titled '[pallas] Fix bad rebase, deleted lowering for a print' was created by copybara-service[bot] (Bot). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n",
    "28": "Pull Request 2829 titled 'refactor how map and call primitives are tagged' was created by mattjj (User). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n- jekbradbury commented on 2020-04-25T04:01:16Z: I'm not sure I like `staged_out` as a tag name here. I'm guessing it means \"outer `JaxprTrace`s will stage out instances of this primitive in their entirety, rather than partially-evaluating their bodies\" (right?)\u2014but it took me a while to realize that was what this probably referred to. Maybe `always_staged_out` or `fully_stage_out`?\n- mattjj commented on 2020-04-25T04:10:09Z: I think it\u2019s a property of the primitive, whether its impl executes in Python or if it\u2019s staged out of Python. Nothing on its own to do with tracing. But those are the primitives for which we would hoist as much as possible into them, hence the interaction with StagingJaxprTrace. \n- jekbradbury commented on 2020-04-25T05:58:52Z: OK, that makes sense! Thanks for explaining.\n- mattjj commented on 2020-04-28T00:36:41Z: I had some follow-up changes in mind to try out, like either\r\n\r\n1. factoring out `xla_call_jaxpr`/`pmap_call_jaxpr` primitives that work like the other initial-style higher-order primitives so that there's no need for a special case analysis in jaxpr interpreters, or else\r\n2. cleaning up the representation / case analysis so that instead of relying on `extract_call_jaxpr` we have special `JaxprCallEqn` / `JaxprMapEqn` classes which have `call_jaxpr` and `call_jaxpr`/`mapped_invars` fields respectively.\r\n\r\nI implemented 2 already (in an un-pushed commit), but want to try 1 as it now seems more promising.\r\n\r\nDo you think we should merge this PR now-ish, and make more changes in follow-ups? Or fuse all such changes together? The latter might be slightly nicer for any jaxpr consumers, since they won't have to make multiple changes, but it also means making more changes at once (and increasing the chance I run out of fuel on this).\r\n\r\nIn any case, @gnecula if you have time I plan to wait for your review / LGTM, since I could really benefit from your advice here. Don't hold back: I'm happy to make changes!\n- mattjj commented on 2020-06-18T21:03:13Z: I'm going to replace this with a fresh PR!\n",
    "29": "Pull Request 15993 titled 'generalize dot_general input dtypes, and transposition rule' was created by mattjj (User). The PR is in closed state. The PR contains N/A commits, with 0 additions and 0 deletions across 0 files. \n\nBody: No description available\n\nComments:\n"
}